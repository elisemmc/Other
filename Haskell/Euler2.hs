{--
Project Euler Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
--}

--there has to be a better way to do this, this is really slow
--I'm generating each number individually using recursion, that's inefficient
{--
fibonacci x
    | x == 0 = 0
    | x == 1 = 1
    | x > 1 = fibonacci ( x - 1 ) + fibonacci ( x - 2 )

createList a = take a [fibonacci x | x <- [2..]]
--} 

--I'm honestly not sure how to get the two last elements
--I can get the first two though because they will always be indexed 0 and 1
--I will generate the list backwards by adding one element at a time at the front
fibStart = [ 2, 1 ]

fibGen x = [ x!!0 + x!!1 ] ++ x

--takeWhile help http://learnyouahaskell.com/higher-order-functions

--how do I do a list that checks if the newest list begins with a # greater than 4000000
--I want to iterate until the first element of the most recent list is 4000000
fibList = last ( take 100 (iterate fibGen fibStart) )--gets the last list of the iterate since it has most values

fibDesired = filter even (filter (<4000000) fibList)--filter all values not even and <4M

answer = sum fibDesired